{"fm": "parse ( String ) { s = Utilities . singleSpaced ( s ) ; Converters . checkNull ( ) ; if ( this . parseAsDate ) { return LocalDate . parse ( s ) . LocalDate . atStartOfDay ( ZoneId . systemDefault ( ) ) . LocalDate . toInstant ( ) ; } else { return LocalDateTime . parse ( s ) . LocalDateTime . atZone ( ZoneId . systemDefault ( ) ) . LocalDateTime . toInstant ( ) ; } }", 
"test_prefix": "testJSDate ( ) { ScriptEngineManager factory = new ScriptEngineManager ( ) ; ScriptEngine engine = factory . getEngineByName ( \"nashorn\" ) ; Object obj = engine . eval ( \"new<sp>Date(2010,<sp>1,<sp>2);\" ) ; ScriptObjectMirror jsDate = ( ( ScriptObjectMirror ) ( obj ) ) ; double timestampLocal = ( ( double ) ( jsDate . callMember ( \"getTime\" ) ) ) ; Instant instant = Converters . toDate ( timestampLocal ) ; String someDate = \"2010-02-02\" ; DateParsing parsing = new DateParsing ( someDate ) ; Instant expected = parsing . parse ( someDate ) ; \"<AssertPlaceHolder>\" ; } ", 
"assertion": "assertEquals ( expected , instant )", 
"inputs": "<s>parse ( String ) { s = Utilities. singleSpaced ( s ) ; Converters. checkNull ( ) ; if ( this. parseAsDate ) { return LocalDate. parse ( s ). LocalDate. atStartOfDay (</s>testJSDate ( ) { ScriptEngineManager factory = new ScriptEngineManager ( ) ; ScriptEngine engine = factory. getEngineByName ( \"nashorn\" ) ; Object obj = engine. eval ( \"new<sp>Date(2010,<sp>1,<sp>2);\" ) ; ScriptObjectMirror jsDate = ( ( ScriptObjectMirror ) ( obj ) ) ; double timestampLocal = ( ( double ) ( jsDate. callMember ( \"getTime\" ) ) ) ; Instant instant = Converters. toDate ( timestampLocal ) ; String someDate = \"2010-02-02\" ; DateParsing parsing</s>assertEquals (<mask>,<mask> )</s>", 
"outputs": ["assertEquals ( instant, instant )", 
"assertEquals ( null, instant )", 
"assertEquals ( instant, null )", 
"assertEquals ( Instant, instant )", 
"assertEquals ( instant, Instant )", 
"assertEquals ( 1, instant )", 
"assertEquals ( instant, 1 )", 
"assertEquals ( UTC, instant )", 
"assertEquals ( instant, UTC )", 
"assertEquals ( date, instant )", 
"assertEquals ( instant, date )", 
"assertEquals ( 0, instant )", 
"assertEquals ( instant, 0 )", 
"assertEquals ( \"\", instant )", 
"assertEquals ( instant, \"\" )", 
"assertEquals (Instant, instant )", 
"assertEquals ( instant,Instant )", 
"assertEquals ( expected, instant )", 
"assertEquals ( 2, instant )", 
"assertEquals ( instant, 2 )", 
"assertEquals ( 3, instant )", 
"assertEquals ( instant, 3 )", 
"assertEquals ( epoch, instant )", 
"assertEquals ( instant, epoch )", 
"assertEquals ( 2010, instant )", 
"assertEquals ( leap, instant )", 
"assertEquals ( now, instant )", 
"assertEquals ( instant, now )", 
"assertEquals ( 5, instant )", 
"assertEquals ( instant, 5 )"], "truth": "assertEquals ( expected, instant )"}